#![no_main]
#![no_std]

// panicking behavior
extern crate panic_halt;

// board support
extern crate solo_bsp as board;
// use board::stm32;
// use board::hal::prelude::*;

use ed25519_dalek::*;

// https://tools.ietf.org/html/rfc8032#section-7.3
fn ed25519ph_rf8032_test_vector() {
    let secret_key: [u8; 32] = [
        0x83, 0x3f, 0xe6, 0x24, 0x09, 0x23, 0x7b, 0x9d,
        0x62, 0xec, 0x77, 0x58, 0x75, 0x20, 0x91, 0x1e,
        0x9a, 0x75, 0x9c, 0xec, 0x1d, 0x19, 0x75, 0x5b,
        0x7d, 0xa9, 0x01, 0xb9, 0x6d, 0xca, 0x3d, 0x42,
    ];
    let public_key: [u8; 32] = [
        0xec, 0x17, 0x2b, 0x93, 0xad, 0x5e, 0x56, 0x3b,
        0xf4, 0x93, 0x2c, 0x70, 0xe1, 0x24, 0x50, 0x34,
        0xc3, 0x54, 0x67, 0xef, 0x2e, 0xfd, 0x4d, 0x64,
        0xeb, 0xf8, 0x19, 0x68, 0x34, 0x67, 0xe2, 0xbf,
    ];
    let message: [u8; 3] = [0x61, 0x16, 0x62];
    let signature = [
        0x98, 0xa7, 0x02, 0x22, 0xf0, 0xb8, 0x12, 0x1a,
        0xa9, 0xd3, 0x0f, 0x81, 0x3d, 0x68, 0x3f, 0x80,
        0x9e, 0x46, 0x2b, 0x46, 0x9c, 0x7f, 0xf8, 0x76,
        0x39, 0x49, 0x9b, 0xb9, 0x4e, 0x6d, 0xae, 0x41,
        0x31, 0xf8, 0x50, 0x42, 0x46, 0x3c, 0x2a, 0x35,
        0x5a, 0x20, 0x03, 0xd0, 0x62, 0xad, 0xf5, 0xaa,
        0xa1, 0x0b, 0x8c, 0x61, 0xe6, 0x36, 0x06, 0x2a,
        0xaa, 0xd1, 0x1c, 0x2a, 0x26, 0x08, 0x34, 0x06,
    ];
    let secret: SecretKey = SecretKey::from_bytes(&secret_key[..SECRET_KEY_LENGTH]).unwrap();
    let public: PublicKey = PublicKey::from_bytes(&public_key[..PUBLIC_KEY_LENGTH]).unwrap();
    let keypair: Keypair = Keypair { secret: secret, public: public };
    let reference_signature: Signature = Signature::from_bytes(&signature[..]).unwrap();

    let mut prehash_for_signing: Sha512 = Sha512::default();
    let mut prehash_for_verifying: Sha512 = Sha512::default();

    prehash_for_signing.input(&message[..]);
    prehash_for_verifying.input(&message[..]);

    let generated_signature: Signature = keypair.sign_prehashed(prehash_for_signing, None);

    assert!(reference_signature == generated_signature,
            "Original signature from test vectors doesn't equal signature produced:\
            \noriginal:\n{:?}\nproduced:\n{:?}", reference_signature, generated_signature);
    assert!(keypair.verify_prehashed(prehash_for_verifying, None, &generated_signature).is_ok(),
            "Could not verify ed25519ph signature!");
}

#[board::entry]
fn main() -> ! {
    ed25519ph_rf8032_test_vector();
    loop {}
}
